{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Produtos } from './produtos.model';\nlet ProdutosComponent = class ProdutosComponent {\n  constructor(produtosService, route) {\n    this.produtosService = produtosService;\n    this.route = route;\n    // produtos: Produtos[] | undefined;\n    this.msg = \"\";\n    this.produto = new Produtos();\n    this.lista = [];\n  }\n  ngOnInit() {\n    /*//VERSÃO P1\r\n    const produtos = this.produtosService.getAll();\r\n    //Sempre que notar uma mudança no query parameter, receberá a descrição digitada na barra de busca\r\n    this.route.queryParamMap.subscribe(params => {\r\n      //Pega a descrição digitada e converte para letras minúsculas\r\n      const descricao = params.get(\"descricao\")?.toLowerCase();\r\n            //Verifica se o produto digitado está presente na lista de produtos\r\n      if(descricao){\r\n        this.produtos = produtos.filter(produto => produto.descricao.toLowerCase().includes(descricao));\r\n        return;\r\n      }\r\n            //Se não estiver no filtro, o atributo produtos recebe toda a lista de produtos\r\n      this.produtos = produtos;\r\n    });\r\n    */\n    //VERSÃO P2\n    /*\r\n    this.route.queryParams.pipe(\r\n      // switchMap troca para um novo observable\r\n      switchMap(() => this.produtosService.listar()),\r\n      map((produtos: Produtos[]) => {\r\n        // Pega a descrição digitada e converte para letras minúsculas\r\n        const descricao = this.route.snapshot.queryParams[\"descricao\"]?.toLowerCase();\r\n                // Verifica se o produto digitado está presente na lista de produtos\r\n        if (descricao) {\r\n          return produtos.filter(produto => produto.descricao.toLowerCase().includes(descricao));\r\n        }\r\n                // Se não estiver no filtro, retorna toda a lista de produtos\r\n        return produtos;\r\n      })\r\n    ).subscribe(produtos => {\r\n      // O resultado final é atribuído a this.produtos\r\n      this.produtos = produtos;\r\n    });\r\n    */\n    /*\r\n    let id = this.route.snapshot.paramMap.get(\"id\");\r\n    if (id != null) {\r\n      this.produto.id = Number(id);\r\n      this.consultar;\r\n    }\r\n    */\n    this.listar();\n  }\n  /*\r\n  public consultar(){\r\n    this.msg = \"\";\r\n    try {\r\n      this.produtosService.consultar(this.produto.id).subscribe(\r\n        (retorno: Produtos) => {\r\n          this.produto.descricao = retorno.descricao;\r\n          this.produto.descricaoPreco = retorno.descricaoPreco;\r\n          this.produto.imagem = retorno.imagem;\r\n          this.produto.preco = retorno.preco;\r\n          this.produto.quantEstoque = retorno.quantEstoque;\r\n          if (retorno.descricao == null) {\r\n            this.msg = \"Registro não encontrado\";\r\n          }\r\n        }\r\n      )\r\n    } catch (error) {\r\n      this.msg = \"Ops! Parece que ocorreu um erro\";\r\n    }\r\n  }\r\n  */\n  listar() {\n    try {\n      this.produtosService.listar().subscribe(retorno => {\n        this.lista = retorno;\n        this.msg = \"\";\n      });\n    } catch (error) {\n      this.msg = \"Nenhum registro encontrado\";\n    }\n  }\n};\nProdutosComponent = __decorate([Component({\n  selector: 'app-produtos',\n  templateUrl: './produtos.component.html',\n  styleUrls: ['./produtos.component.css']\n})], ProdutosComponent);\nexport { ProdutosComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAKzC,SAASC,QAAQ,QAAQ,kBAAkB;AAOpC,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAM5BC,YACUC,eAAgC,EAChCC,KAAqB;IADrB,oBAAe,GAAfD,eAAe;IACf,UAAK,GAALC,KAAK;IAPf;IACA,QAAG,GAAW,EAAE;IAChB,YAAO,GAAa,IAAIJ,QAAQ,EAAE;IAClC,UAAK,GAAe,EAAE;EAKpB;EAEFK,QAAQ;IACN;;;;;;;;;;;;;;;IAkBA;IACA;;;;;;;;;;;;;;;;;;;IAqBA;;;;;;;IAOA,IAAI,CAACC,MAAM,EAAE;EACf;EACA;;;;;;;;;;;;;;;;;;;;;EAsBAA,MAAM;IACJ,IAAI;MACF,IAAI,CAACH,eAAe,CAACG,MAAM,EAAE,CAACC,SAAS,CACpCC,OAAmB,IAAI;QACtB,IAAI,CAACC,KAAK,GAAGD,OAAO;QACpB,IAAI,CAACE,GAAG,GAAG,EAAE;MACf,CAAC,CACF;KACF,CAAC,OAAOC,KAAK,EAAE;MACd,IAAI,CAACD,GAAG,GAAG,4BAA4B;;EAE3C;CACD;AA/FYT,iBAAiB,eAL7BF,SAAS,CAAC;EACTa,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWb,iBAAiB,CA+F7B;SA/FYA,iBAAiB","names":["Component","Produtos","ProdutosComponent","constructor","produtosService","route","ngOnInit","listar","subscribe","retorno","lista","msg","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\OneDrive - Fatec Centro Paula Souza\\Documentos\\Estudos\\Fatec_ADS\\4-Web\\pw-p2\\mintz\\src\\app\\produtos\\produtos.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { IProduto } from '../produtos';\r\nimport { ProdutosService } from '../produtos.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { switchMap, map } from 'rxjs/operators';\r\nimport { Produtos } from './produtos.model';\r\n\r\n@Component({\r\n  selector: 'app-produtos',\r\n  templateUrl: './produtos.component.html',\r\n  styleUrls: ['./produtos.component.css']\r\n})\r\nexport class ProdutosComponent {\r\n  // produtos: Produtos[] | undefined;\r\n  msg: string = \"\";\r\n  produto: Produtos = new Produtos();\r\n  lista: Produtos[] = [];\r\n\r\n  constructor(\r\n    private produtosService: ProdutosService,\r\n    private route: ActivatedRoute\r\n  ){}\r\n\r\n  ngOnInit(): void{\r\n    /*//VERSÃO P1\r\n    const produtos = this.produtosService.getAll();\r\n    //Sempre que notar uma mudança no query parameter, receberá a descrição digitada na barra de busca\r\n    this.route.queryParamMap.subscribe(params => {\r\n      //Pega a descrição digitada e converte para letras minúsculas\r\n      const descricao = params.get(\"descricao\")?.toLowerCase();\r\n\r\n      //Verifica se o produto digitado está presente na lista de produtos\r\n      if(descricao){\r\n        this.produtos = produtos.filter(produto => produto.descricao.toLowerCase().includes(descricao));\r\n        return;\r\n      }\r\n\r\n      //Se não estiver no filtro, o atributo produtos recebe toda a lista de produtos\r\n      this.produtos = produtos;\r\n    });\r\n    */\r\n\r\n    //VERSÃO P2\r\n    /*\r\n    this.route.queryParams.pipe(\r\n      // switchMap troca para um novo observable\r\n      switchMap(() => this.produtosService.listar()),\r\n      map((produtos: Produtos[]) => {\r\n        // Pega a descrição digitada e converte para letras minúsculas\r\n        const descricao = this.route.snapshot.queryParams[\"descricao\"]?.toLowerCase();\r\n  \r\n        // Verifica se o produto digitado está presente na lista de produtos\r\n        if (descricao) {\r\n          return produtos.filter(produto => produto.descricao.toLowerCase().includes(descricao));\r\n        }\r\n  \r\n        // Se não estiver no filtro, retorna toda a lista de produtos\r\n        return produtos;\r\n      })\r\n    ).subscribe(produtos => {\r\n      // O resultado final é atribuído a this.produtos\r\n      this.produtos = produtos;\r\n    });\r\n    */\r\n    /*\r\n    let id = this.route.snapshot.paramMap.get(\"id\");\r\n    if (id != null) {\r\n      this.produto.id = Number(id);\r\n      this.consultar;\r\n    }\r\n    */\r\n    this.listar();\r\n  }\r\n  /*\r\n  public consultar(){\r\n    this.msg = \"\";\r\n    try {\r\n      this.produtosService.consultar(this.produto.id).subscribe(\r\n        (retorno: Produtos) => {\r\n          this.produto.descricao = retorno.descricao;\r\n          this.produto.descricaoPreco = retorno.descricaoPreco;\r\n          this.produto.imagem = retorno.imagem;\r\n          this.produto.preco = retorno.preco;\r\n          this.produto.quantEstoque = retorno.quantEstoque;\r\n          if (retorno.descricao == null) {\r\n            this.msg = \"Registro não encontrado\";\r\n          }\r\n        }\r\n      )\r\n    } catch (error) {\r\n      this.msg = \"Ops! Parece que ocorreu um erro\";\r\n    }\r\n  }\r\n  */\r\n\r\n  listar(){\r\n    try {\r\n      this.produtosService.listar().subscribe(\r\n        (retorno: Produtos[]) => {\r\n          this.lista = retorno;\r\n          this.msg = \"\";\r\n        }\r\n      );\r\n    } catch (error) {\r\n      this.msg = \"Nenhum registro encontrado\";\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}