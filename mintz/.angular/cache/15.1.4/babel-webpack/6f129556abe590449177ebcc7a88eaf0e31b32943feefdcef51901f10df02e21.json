{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Cliente } from './cliente.model';\nlet ClienteComponent = class ClienteComponent {\n  constructor(clienteService, routes, notificacaoService) {\n    this.clienteService = clienteService;\n    this.routes = routes;\n    this.notificacaoService = notificacaoService;\n    this.msg = \"\";\n    this.cliente = new Cliente();\n    this.senha = \"\";\n    this.confirmarSenha = \"\";\n    this.senhasDiferentes = false;\n  }\n  ngOnInit() {\n    const clienteLogado = localStorage.getItem(\"cliente\");\n    if (clienteLogado != null) {\n      this.cliente = JSON.parse(clienteLogado);\n    }\n  }\n  atualizar() {\n    if (this.senha.length > 0) {\n      if (this.senha == this.confirmarSenha) {\n        this.cliente.senha = this.senha;\n      } else {\n        this.notificacaoService.notificar(\"A senha e a confirmação não batem\");\n        return;\n      }\n    }\n    try {\n      this.clienteService.atualizar(this.cliente);\n      this.msg = \"Dados atualizados com sucesso\";\n      this.notificacaoService.notificar(this.msg);\n    } catch (error) {\n      this.notificarErro();\n    }\n    //Atualiza as informações\n    localStorage.setItem(\"cliente\", JSON.stringify(this.cliente));\n  }\n  consultar() {\n    this.msg = \"\";\n    try {\n      this.clienteService.consultar(this.cliente.id).subscribe(resposta => {\n        this.cliente.bairro = resposta.bairro;\n        this.cliente.cep = resposta.cep;\n        this.cliente.cidade = resposta.cidade;\n        this.cliente.complemento = resposta.complemento;\n        this.cliente.cpf = resposta.cpf;\n        this.cliente.email = resposta.email;\n        this.cliente.logradouro = resposta.logradouro;\n        this.cliente.nome = resposta.nome;\n        this.cliente.senha = resposta.senha;\n        this.cliente.uf = resposta.uf;\n        if (resposta.nome == null) {\n          this.msg = \"Registro não encontrado\";\n          this.notificacaoService.notificar(this.msg);\n        }\n      });\n    } catch (error) {\n      this.notificarErro();\n    }\n  }\n  excluir() {\n    try {\n      this.clienteService.excluir(this.cliente.id);\n      this.msg = \"Conta excluída com sucesso\";\n      this.notificacaoService.notificar(this.msg);\n    } catch (error) {\n      this.notificarErro();\n    }\n  }\n  notificarErro() {\n    this.msg = \"Ops, parece algo deu errado\";\n    this.notificacaoService.notificar(this.msg);\n  }\n  verificarSenhas() {\n    this.senhasDiferentes = this.senha !== this.confirmarSenha;\n  }\n};\nClienteComponent = __decorate([Component({\n  selector: 'app-cliente',\n  templateUrl: './cliente.component.html',\n  styleUrls: ['./cliente.component.css']\n})], ClienteComponent);\nexport { ClienteComponent };","map":{"version":3,"mappings":"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","names":["Component","Cliente","ClienteComponent","constructor","clienteService","routes","notificacaoService","ngOnInit","clienteLogado","localStorage","getItem","cliente","JSON","parse","atualizar","senha","length","confirmarSenha","notificar","msg","error","notificarErro","setItem","stringify","consultar","id","subscribe","resposta","bairro","cep","cidade","complemento","cpf","email","logradouro","nome","uf","excluir","verificarSenhas","senhasDiferentes","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\OneDrive - Fatec Centro Paula Souza\\Documentos\\Estudos\\Fatec_ADS\\4-Web\\pw-p2\\mintz\\src\\app\\cliente\\cliente.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Cliente } from './cliente.model';\r\nimport { ClienteService } from '../services/cliente.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { NotificacaoService } from '../services/notificacao.service';\r\n\r\n@Component({\r\n  selector: 'app-cliente',\r\n  templateUrl: './cliente.component.html',\r\n  styleUrls: ['./cliente.component.css']\r\n})\r\nexport class ClienteComponent {\r\n  msg: string = \"\";\r\n  cliente: Cliente = new Cliente();\r\n  senha: string = \"\";\r\n  confirmarSenha: string = \"\";\r\n  senhasDiferentes: boolean = false;\r\n\r\n  constructor(\r\n    private clienteService: ClienteService,\r\n    private routes: ActivatedRoute,\r\n    private notificacaoService: NotificacaoService\r\n  ){}\r\n    \r\n\r\n  ngOnInit(){\r\n    const clienteLogado = localStorage.getItem(\"cliente\");\r\n    if (clienteLogado != null) {\r\n      this.cliente = JSON.parse(clienteLogado);\r\n    }\r\n  }\r\n\r\n  atualizar(): void{\r\n    if (this.senha.length > 0) {\r\n      if (this.senha == this.confirmarSenha) {\r\n        this.cliente.senha = this.senha;\r\n      } else {\r\n        this.notificacaoService.notificar(\"A senha e a confirmação não batem\");\r\n        return;\r\n      }\r\n    }\r\n    try {\r\n        this.clienteService.atualizar(this.cliente);\r\n        this.msg = \"Dados atualizados com sucesso\";\r\n        this.notificacaoService.notificar(this.msg);\r\n    } catch (error) {\r\n      this.notificarErro();\r\n    }\r\n    //Atualiza as informações\r\n    localStorage.setItem(\"cliente\", JSON.stringify(this.cliente));\r\n  }\r\n\r\n  consultar(){\r\n    this.msg = \"\";\r\n    try {\r\n      this.clienteService.consultar(this.cliente.id).subscribe(\r\n        (resposta: Cliente) => {\r\n          this.cliente.bairro = resposta.bairro;\r\n          this.cliente.cep = resposta.cep;\r\n          this.cliente.cidade = resposta.cidade;\r\n          this.cliente.complemento = resposta.complemento;\r\n          this.cliente.cpf = resposta.cpf;\r\n          this.cliente.email = resposta.email;\r\n          this.cliente.logradouro = resposta.logradouro;\r\n          this.cliente.nome = resposta.nome;\r\n          this.cliente.senha = resposta.senha;\r\n          this.cliente.uf = resposta.uf;\r\n\r\n          if (resposta.nome == null) {\r\n            this.msg = \"Registro não encontrado\";\r\n            this.notificacaoService.notificar(this.msg);\r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      this.notificarErro();\r\n    }\r\n  }\r\n\r\n  excluir(): void{\r\n    try {\r\n      this.clienteService.excluir(this.cliente.id);\r\n      this.msg = \"Conta excluída com sucesso\";\r\n      this.notificacaoService.notificar(this.msg);\r\n    } catch (error) {\r\n      this.notificarErro();\r\n    }\r\n  }\r\n\r\n  notificarErro(){\r\n    this.msg = \"Ops, parece algo deu errado\";\r\n    this.notificacaoService.notificar(this.msg);\r\n  }\r\n\r\n  verificarSenhas(): void{\r\n    this.senhasDiferentes = this.senha !== this.confirmarSenha;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}